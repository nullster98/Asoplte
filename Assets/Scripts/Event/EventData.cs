using JetBrains.Annotations;
using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

[System.Flags]
public enum EventTag //이벤트 태그들
{
    None = 0,
    Start = 1 << 0, // 1
    Positive = 1 << 1, // 2
    Negative = 1 << 2, // 4
    Battle = 1 << 3, // 8
    Chaos = 1 << 4, // 16
    Encounter = 1 << 5, // 32
    Rest = 1 << 6, // 64
    Boss = 1 << 7, // 128

    Sequential = 1 << 8 // 이벤트 후속

}

[System.Serializable]
public class EventData //이벤트 기본 뼈대
{
    public string EventName;   
    public List<EventPhase> Phases;
    public EventTag EventType;
}

[System.Serializable]
public class EventPhase
{
    public string PhaseName;
    public Sprite EventImage;
    public List<EventChoice> Choices;
    public string EventDescription {  get; set; }

    public void GetDescription()
    {
        TextAsset textAsset = Resources.Load<TextAsset>($"Event/Descriptions/{PhaseName}");
        EventDescription = textAsset != null ? textAsset.text : "설명 없음";
    }

    //이벤트 이미지 로드 헬퍼 함수
    public void LoadEventImage()
    {
        EventImage = Resources.Load<Sprite>($"Event/Images/{PhaseName}");
        if (EventImage == null)
        {
            Debug.LogWarning($"{PhaseName} 이미지를 찾을 수 없습니다! 기본 이미지로 설정.");
            EventImage = Resources.Load<Sprite>("Event/Images/default");
        }
    }
}

[System.Serializable]
public class EventChoice
{
    public string ChoiceName; //선택지 이름
    public string RequiredTraits; //필요 특성
    public string NextEventName;
    public int NextPhaseIndex = -1;
    public bool BattleTrigger = false;
    public int? FixedID = -1; //기본값 -1(조우 없음), 0(랜덤 적), ID(특정 조우)

    public bool AcquisitionTrigger = false; //보상 트리거
    public AcquisitionType? AcqType; //획득하게할 타입
    public int? AcqID; //획득할 아이템의 ID

    public bool CanPlayerSelect(List<Trait> playerTraits)
    {
        if (string.IsNullOrEmpty(RequiredTraits)) return true; // 필요 특성이 없으면 선택 가능
        return playerTraits.Exists(trait => trait.TraitName == RequiredTraits); // 플레이어가 특성을 가지고 있으면 선택 가능
    }

    public bool IsEventEnd()
    {
        return (string.IsNullOrEmpty(NextEventName) || NextEventName == "END") && NextPhaseIndex == -1;
    }
}
